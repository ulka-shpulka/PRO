require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');

// Environment variables
const token = process.env.BOT_TOKEN;
const adminChatId = process.env.ADMIN_CHAT_ID;
const domain = process.env.DOMAIN;
const port = process.env.PORT || 3000;

// Validate critical environment variables
if (!token || !adminChatId) {
  console.error('–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –∏ ADMIN_CHAT_ID');
  process.exit(1);
}

// Initialize bot and Express
const bot = new TelegramBot(token, { polling: true });
const app = express();

// Express middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors());
app.use(express.static('public'));

// Storage for users and bookings
const users = {}; // { chatId: username }
const pendingBookings = {}; // { userId: { service, staff, date, time } }

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || `user_${msg.from.id}`;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  users[chatId] = username;
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} (${chatId}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let foundBooking = false;
  
  // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º pendingBookings
  Object.keys(pendingBookings).forEach(userId => {
    const booking = pendingBookings[userId];
    
    // –î–æ–±–∞–≤–ª—è–µ–º chatId –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    booking.chatId = chatId;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    bot.sendMessage(
      chatId,
      `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Leo Beauty! 

–ú—ã –Ω–∞—à–ª–∏ –≤–∞—à—É –∑–∞–ø–∏—Å—å:

‚ú® –£—Å–ª—É–≥–∞: ${booking.service}
üßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${booking.staff}
üìÜ –î–∞—Ç–∞: ${booking.date}
üïí –í—Ä–µ–º—è: ${booking.time}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å.`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `confirm_${userId}` }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `cancel_${userId}` }]
          ]
        }
      }
    );
    
    foundBooking = true;
  });
  
  // –ï—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!foundBooking) {
    bot.sendMessage(
      chatId,
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Leo Beauty! ‚ú®

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª—É–≥—É, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –≤—Ä–µ–º—è.

–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏!`
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  
  // –†–∞–∑–±–∏—Ä–∞–µ–º data: "confirm_userId" –∏–ª–∏ "cancel_userId"
  const [action, userId] = data.split('_');
  const booking = pendingBookings[userId];
  
  if (!booking) {
    bot.answerCallbackQuery(callbackQuery.id, { text: "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞" });
    return;
  }
  
  if (action === 'confirm') {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.sendMessage(
      adminChatId,
      `üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!

–£—Å–ª—É–≥–∞: ${booking.service}
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${booking.staff}
–î–∞—Ç–∞: ${booking.date}
–í—Ä–µ–º—è: ${booking.time}
–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${users[chatId] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    bot.editMessageText(
      `‚úÖ –í–∞—à –≤–∏–∑–∏—Ç –≤ Leo Beauty –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!

‚ú® –£—Å–ª—É–≥–∞: ${booking.service}
üßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${booking.staff}
üìÜ –î–∞—Ç–∞: ${booking.date}
üïí –í—Ä–µ–º—è: ${booking.time}

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä! –ñ–¥—ë–º –≤–∞—Å! üå∏`,
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    delete pendingBookings[userId];
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
    bot.answerCallbackQuery(callbackQuery.id, { text: "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!" });
  } 
  else if (action === 'cancel') {
    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    bot.editMessageText(
      `‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. 

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç.`,
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    delete pendingBookings[userId];
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
    bot.answerCallbackQuery(callbackQuery.id, { text: "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞" });
  }
});

// API Endpoints
app.post('/api/pending-booking', (req, res) => {
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:", req.body);
    
    const { service, staff, date, time, userId } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!service || !staff || !date || !time || !userId) {
      console.error('–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã', req.body);
      return res.status(400).json({ 
        success: false, 
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (service, staff, date, time, userId)' 
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    pendingBookings[userId] = { service, staff, date, time };
    console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', pendingBookings[userId]);

    return res.json({ 
      success: true, 
      message: '–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({ status: 'ok', uptime: process.uptime() });
});

// Server
const server = app.listen(port, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üì° –î–æ–º–µ–Ω: ${domain}`);
});

// Error handling for Telegram bot
bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

// –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});