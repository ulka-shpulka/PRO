require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const app = express();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (polling –∏–ª–∏ webhook)
const BOT_MODE = process.env.BOT_MODE || 'polling';
const BOT_TOKEN = process.env.BOT_TOKEN;
const DOMAIN = process.env.DOMAIN || 'https://pro-1-qldl.onrender.com';

let bot;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
if (BOT_MODE === 'polling') {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
  bot = new TelegramBot(BOT_TOKEN, { polling: true });
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
  
  // –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ polling
  bot.on('polling_error', (error) => {
    console.log('–û—à–∏–±–∫–∞ polling:', error.message);
    
    if (error.message.includes('409 Conflict') || error.message.includes('terminated by other getUpdates')) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç polling, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π polling
      bot.stopPolling()
        .then(() => {
          console.log('Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          setTimeout(() => {
            bot.startPolling()
              .then(() => console.log('Polling —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω'))
              .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ polling:', e));
          }, 5000);
        })
        .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling:', e));
    }
  });
} else {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
  bot = new TelegramBot(BOT_TOKEN, { polling: false });
  
  const webhookUrl = `${DOMAIN}/bot${BOT_TOKEN}`;
  bot.setWebHook(webhookUrl)
    .then(() => {
      console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${webhookUrl}`);
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', error);
    });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook
  app.post(`/bot${BOT_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const userTelegramMap = {}; // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ userId —Å telegramId
const pendingBookings = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ userId

app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// API –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
app.post('/api/pending-booking', (req, res) => {
  const { service, staff, date, time, userId } = req.body;
  
  if (!service || !staff || !date || !time || !userId) {
    return res.status(400).json({ success: false, message: "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }
  
  const bookingId = Math.random().toString(36).substring(2, 10);
  pendingBookings[userId] = { 
    id: bookingId, 
    service, 
    staff, 
    date, 
    time,
    createdAt: new Date().toISOString()
  };
  
  res.json({ success: true, bookingId });
});

// API –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∞–π—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram
app.post('/api/link-telegram', (req, res) => {
  const { userId, telegramId } = req.body;
  
  if (!userId || !telegramId) {
    return res.status(400).json({ success: false, message: "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }
  
  userTelegramMap[telegramId] = userId;
  res.json({ success: true });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å–∏ –¥–ª—è Telegram ID
app.get('/api/booking-by-telegram/:telegramId', (req, res) => {
  const telegramId = req.params.telegramId;
  const userId = userTelegramMap[telegramId];
  
  if (!userId || !pendingBookings[userId]) {
    return res.status(404).json({ success: false, message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
  }
  
  res.json({ success: true, booking: pendingBookings[userId] });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∏–∑ deep link
bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();
  const startParameter = match[1]; // –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ deep link (userId)
  
  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  bot.sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏!");
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ deep link, —Å–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (startParameter) {
    const userId = startParameter;
    userTelegramMap[telegramId] = userId;
    console.log(`–°–≤—è–∑–∞–Ω telegramId ${telegramId} —Å userId ${userId}`);
    bot.sendMessage(chatId, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å —Å–∞–π—Ç–æ–º!");
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞ —Å–∞–π—Ç–µ
  const userId = userTelegramMap[telegramId];
  
  if (!userId) {
    bot.sendMessage(chatId, 
      "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å —Å–∞–π—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É. " +
      "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", 
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏", callback_data: "check_bookings" }]
          ]
        }
      }
    );
    return;
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const booking = pendingBookings[userId];
  
  if (!booking) {
    bot.sendMessage(chatId, 
      "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∞ —Å–∞–π—Ç–µ.", 
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏", callback_data: "check_bookings" }]
          ]
        }
      }
    );
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
  const { service, staff, date, time } = booking;
  const formattedDate = new Date(date).toLocaleDateString('ru-RU');
  
  const text = `‚ú® –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n\nüîπ –£—Å–ª—É–≥–∞: ${service}\nüîπ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}\nüîπ –î–∞—Ç–∞: ${formattedDate}\nüîπ –í—Ä–µ–º—è: ${time}`;
  
  bot.sendMessage(chatId, text, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data: `cancel_${userId}` }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const telegramId = query.from.id.toString();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏"
  if (query.data === "check_bookings") {
    const userId = userTelegramMap[telegramId];
    
    if (!userId) {
      bot.answerCallbackQuery(query.id, { text: "–í—ã –µ—â–µ –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Å–∞–π—Ç–æ–º" });
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∞ —Å–∞–π—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –≤–∏–∑–∏—Ç'");
      return;
    }
    
    const booking = pendingBookings[userId];
    
    if (!booking) {
      bot.answerCallbackQuery(query.id, { text: "–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
      bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∞ —Å–∞–π—Ç–µ.");
      return;
    }
    
    const { service, staff, date, time } = booking;
    const formattedDate = new Date(date).toLocaleDateString('ru-RU');
    
    const text = `‚ú® –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n\nüîπ –£—Å–ª—É–≥–∞: ${service}\nüîπ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}\nüîπ –î–∞—Ç–∞: ${formattedDate}\nüîπ –í—Ä–µ–º—è: ${time}`;
    
    bot.answerCallbackQuery(query.id);

    bot.sendMessage(chatId, text, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data: `cancel_${userId}` }]
        ]
      }
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
  if (query.data.startsWith('cancel_')) {
    const userId = query.data.split('_')[1];
    
    bot.deleteMessage(chatId, query.message.message_id)
      .then(() => {
        delete pendingBookings[userId];
        bot.answerCallbackQuery(query.id, { text: "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞" });
      })
      .catch(error => {
        bot.editMessageText('‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞', {
          chat_id: chatId,
          message_id: query.message.message_id
        });
        delete pendingBookings[userId];
        bot.answerCallbackQuery(query.id, { text: "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞" });
      });
  }
});

// –ü–æ–¥–∞—á–∞ —Å–∞–π—Ç–∞
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
