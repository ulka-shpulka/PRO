require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
let bot;

// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±—Ö—É–∫ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
if (process.env.NODE_ENV === 'production') {
  bot = new TelegramBot(process.env.BOT_TOKEN);
  bot.setWebHook(process.env.WEBHOOK_URL || '');
} else {
  bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: {
      params: {
        timeout: 10
      },
      interval: 2000
    }
  });
  bot.deleteWebHook();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å–∏
const users = {};
const pendingBookings = {};

app.use(bodyParser.json());
app.use(cors());
app.use(express.static('public'));

// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
function resetData() {
  Object.keys(users).forEach(chatId => delete users[chatId]);
  Object.keys(pendingBookings).forEach(bookingId => delete pendingBookings[bookingId]);
}
resetData(); // –í—ã–∑—ã–≤–∞–µ–º —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  try {
    const chatId = msg.chat.id;
    users[chatId] = { username: msg.from.username || `user_${msg.from.id}`, lastBookingId: null };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    const lastBooking = getLastBookingForUser(chatId);

    if (lastBooking) {
      const { id, service, staff, date, time } = lastBooking;
      users[chatId].lastBookingId = id;

      bot.sendMessage(chatId, `üéâ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:\n\n‚ú® –£—Å–ª—É–≥–∞: ${service}\nüßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}\nüìÖ –î–∞—Ç–∞: ${date}\nüïí –í—Ä–µ–º—è: ${time}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `confirm_${id}` }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `cancel_${id}` }]
          ]
        }
      });
    } else {
      // –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞
      bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Leo Beauty! ‚ú®\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É "/start" –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏.`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start:', error);
  }
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const [action, bookingId] = query.data.split('_');
  const booking = pendingBookings[bookingId];

  if (!booking) {
    bot.answerCallbackQuery(query.id, { text: "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    return;
  }

  if (action === 'confirm') {
    users[chatId].lastBookingId = bookingId;
    await bot.editMessageText(`‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!`, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: { inline_keyboard: [] }
    });
  } else if (action === 'cancel') {
    delete pendingBookings[bookingId];
    await bot.editMessageText(`‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.`, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: { inline_keyboard: [] }
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getLastBookingForUser(chatId) {
  const user = users[chatId];
  return user?.lastBookingId ? pendingBookings[user.lastBookingId] : null;
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
