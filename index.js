require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const path = require('path');

// Environment variables
const token = process.env.BOT_TOKEN;
const adminChatId = process.env.ADMIN_CHAT_ID;
const domain = process.env.DOMAIN;
const port = process.env.PORT || 3000;
const mongoUri = process.env.MONGO_URI || 'mongodb://localhost:27017/salon';

// Validate critical environment variables
if (!token || !adminChatId) {
  console.error('–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –∏ ADMIN_CHAT_ID');
  process.exit(1);
}

// Initialize bot and Express
const bot = new TelegramBot(token, { polling: true });
const app = express();

// Express middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors());
app.use(express.static('public'));

// Connect to MongoDB
mongoose.connect(mongoUri)
  .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// Define schemas
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  chatId: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now }
});

const bookingSchema = new mongoose.Schema({
  service: { type: String, required: true },
  staff: { type: String, required: true },
  date: { type: String, required: true },
  time: { type: String, required: true },
  telegramUsername: { type: String, required: true },
  status: { type: String, enum: ['pending', 'confirmed', 'cancelled'], default: 'pending' },
  createdAt: { type: Date, default: Date.now }
});

// Define models
const User = mongoose.model('User', userSchema);
const Booking = mongoose.model('Booking', bookingSchema);

// In-memory storage for pending bookings
const pendingBookings = {};

// Bot commands
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;

  if (!username) {
    return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–ø–∏—Å–∏.');
  }

  try {
    // Save or update user
    await User.findOneAndUpdate(
      { username },
      { username, chatId },
      { upsert: true, new: true }
    );
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å chatId ${chatId}`);
    
    // Check if there's a pending booking
    const pendingBooking = pendingBookings[username];
    
    if (pendingBooking) {
      // Create confirmation buttons
      const confirmKeyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data: `confirm_${username}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${username}` }
          ]
        ]
      };
      
      // Send confirmation message
      await bot.sendMessage(
        chatId,
        `–ù–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å:
        
‚ú® –£—Å–ª—É–≥–∞: ${pendingBooking.service}
üßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${pendingBooking.staff}
üìÜ –î–∞—Ç–∞: ${pendingBooking.date}
üïí –í—Ä–µ–º—è: ${pendingBooking.time}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:`,
        { reply_markup: confirmKeyboard }
      );
    } else {
      // Welcome message
      await bot.sendMessage(
        chatId,
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Leo Beauty! ‚ú®

–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à —Å–∞–π—Ç.
        
–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–ø–∏—Å–∏.`
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle callback queries (button clicks)
bot.on('callback_query', async (callbackQuery) => {
  const action = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  
  // Extract action and username
  const [command, username] = action.split('_');
  
  if (command === 'confirm' && pendingBookings[username]) {
    try {
      const booking = pendingBookings[username];
      
      // Save booking to database
      const newBooking = new Booking({
        ...booking,
        telegramUsername: username,
        status: 'confirmed'
      });
      await newBooking.save();
      
      // Notify admin
      const adminMessage = `
üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!
–£—Å–ª—É–≥–∞: ${booking.service}
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${booking.staff}
–î–∞—Ç–∞: ${booking.date}
–í—Ä–µ–º—è: ${booking.time}
–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${username}
      `;
      await bot.sendMessage(adminChatId, adminMessage);
      
      // Notify user
      await bot.editMessageText(
        `‚úÖ –í–∞—à –≤–∏–∑–∏—Ç –≤ Leo Beauty –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!

‚ú® –£—Å–ª—É–≥–∞: ${booking.service}
üßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${booking.staff}
üìÜ –î–∞—Ç–∞: ${booking.date}
üïí –í—Ä–µ–º—è: ${booking.time}

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä! –ñ–¥—ë–º –≤–∞—Å! üå∏`,
        {
          chat_id: chatId,
          message_id: messageId
        }
      );
      
      // Remove from pending
      delete pendingBookings[username];
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } else if (command === 'cancel' && pendingBookings[username]) {
    // Remove from pending
    delete pendingBookings[username];
    
    // Notify user
    await bot.editMessageText(
      '‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç.',
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
  }
});

// API Endpoints
app.post('/api/pending-booking', async (req, res) => {
  const { service, staff, date, time, telegramUsername } = req.body;

  if (!service || !staff || !date || !time || !telegramUsername) {
    console.error('–û—à–∏–±–∫–∞: –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', req.body);
    return res.status(400).json({ success: false, error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    // Check if user exists in database
    const user = await User.findOne({ username: telegramUsername });
    
    // Save the pending booking
    pendingBookings[telegramUsername] = { service, staff, date, time };
    console.log('–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', pendingBookings[telegramUsername]);
    
    // If user already exists, send them the confirmation message
    if (user) {
      const confirmKeyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data: `confirm_${telegramUsername}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${telegramUsername}` }
          ]
        ]
      };
      
      await bot.sendMessage(
        user.chatId,
        `–ù–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å:
        
‚ú® –£—Å–ª—É–≥–∞: ${service}
üßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}
üìÜ –î–∞—Ç–∞: ${date}
üïí –í—Ä–µ–º—è: ${time}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:`,
        { reply_markup: confirmKeyboard }
      );
    }
    
    return res.json({ 
      success: true, 
      message: '–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ Telegram –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
      userExists: !!user
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏:', error);
    return res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// Server
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`–î–æ–º–µ–Ω: ${domain}`);
});

// Error handling for Telegram bot
bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  await mongoose.connection.close();
  process.exit(0);
});