require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');

const app = express();

// Choose polling OR webhook mode, not both
let bot;

if (process.env.NODE_ENV === 'production') {
  // Use webhook in production
  bot = new TelegramBot(process.env.BOT_TOKEN);
  bot.setWebHook(process.env.WEBHOOK_URL || '');
} else {
  // Use polling in development
  bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: {
      params: {
        timeout: 10
      },
      interval: 2000
    }
  });
  // Make sure to delete any existing webhook  
  bot.deleteWebHook();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å–∏
const users = {};
const pendingBookings = {};
const telegramUserIds = {}; // –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É userId –∏ chatId

app.use(bodyParser.json());
app.use(cors());
app.use(express.static('public'));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId –∏–ª–∏ telegramId
function findBookingsForUser(userId, chatId) {
  let userBookings = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –º–µ–∂–¥—É chatId –∏ userId
  const linkedUserId = chatId ? Object.keys(telegramUserIds).find(uid => telegramUserIds[uid] === chatId) : null;
  
  for (const [id, booking] of Object.entries(pendingBookings)) {
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ –ø—Ä—è–º–æ–º—É userId –∏ –ø–æ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É userId)
    if ((userId && id.includes(userId)) || (linkedUserId && id.includes(linkedUserId)) || (booking.userId && (booking.userId === userId || booking.userId === linkedUserId))) {
      if (booking && !booking.cancelled) {
        userBookings.push({
          id,
          booking,
          timestamp: booking.timestamp ? new Date(booking.timestamp).getTime() : 0
        });
      }
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
  userBookings.sort((a, b) => b.timestamp - a.timestamp);
  
  return userBookings;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start(?:\s+(.+))?/, (msg, match) => {
  try {
    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!msg.from) {
      console.error('–û—à–∏–±–∫–∞: msg.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏');
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }
    
    const username = msg.from.username || `user_${msg.from.id}`;
    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}, chatId: ${chatId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    // –ù–∞–ø—Ä–∏–º–µ—Ä: /start user_123456
    const userIdParam = match && match[1] ? match[1].trim() : null;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    users[chatId] = { username, lastBookingId: null };
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId, —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ —Å —Ç–µ–∫—É—â–∏–º chatId
    if (userIdParam) {
      console.log(`–°–≤—è–∑—ã–≤–∞–µ–º userId ${userIdParam} —Å chatId ${chatId}`);
      telegramUserIds[userIdParam] = chatId;
    }
    
    // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBookings = findBookingsForUser(userIdParam, chatId);
    
    if (userBookings.length > 0) {
      // –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å
      const newestBooking = userBookings[0];
      const booking = newestBooking.booking;
      const bookingId = newestBooking.id;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID –∑–∞–ø–∏—Å–∏
      users[chatId].lastBookingId = bookingId;
      
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º chatId –∫ –∑–∞–ø–∏—Å–∏
      booking.chatId = chatId;
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (booking.confirmed) {
        const service = booking.service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        const staff = booking.staff || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const date = booking.date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        const time = booking.time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        bot.sendMessage(chatId, `‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\n‚ú® –£—Å–ª—É–≥–∞: ${service}\nüßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}\nüìÖ –î–∞—Ç–∞: ${date}\nüïí –í—Ä–µ–º—è: ${time}\n\n–ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!`);
        return;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined
      const service = booking.service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      const staff = booking.staff || '–ù–µ —É–∫–∞–∑–∞–Ω';
      const date = booking.date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      const time = booking.time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      
      bot.sendMessage(chatId, `üéâ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:\n\n‚ú® –£—Å–ª—É–≥–∞: ${service}\nüßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}\nüìÖ –î–∞—Ç–∞: ${date}\nüïí –í—Ä–µ–º—è: ${time}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data: `confirm_${bookingId}` }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `cancel_${bookingId}` }]
          ]
        }
      }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø–∏—Å—å—é:', error);
      });
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Leo Beauty! ‚ú®\n\n–î–ª—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç.`)
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      });
    }
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start:', error);
    
    try {
      bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  try {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const [action, bookingId] = query.data.split('_');
    const booking = pendingBookings[bookingId];

    if (!booking) {
      bot.answerCallbackQuery(query.id, { text: "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const service = booking.service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const staff = booking.staff || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const date = booking.date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const time = booking.time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    if (action === 'confirm') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      await bot.editMessageText(`‚úÖ –í–∞—à –≤–∏–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n‚ú® –£—Å–ª—É–≥–∞: ${service}\nüßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}\nüìÖ –î–∞—Ç–∞: ${date}\nüïí –í—Ä–µ–º—è: ${time}`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: [] } // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
      await bot.sendMessage(chatId, "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.");
      
      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å—å –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é
      booking.confirmed = true;
      booking.cancelled = false;
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      bot.answerCallbackQuery(query.id, { text: "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!" });
    } else if (action === 'cancel') {
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      await bot.editMessageText(`‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n‚ú® –£—Å–ª—É–≥–∞: ${service}\nüßë‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}\nüìÖ –î–∞—Ç–∞: ${date}\nüïí –í—Ä–µ–º—è: ${time}`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: [] } // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
      await bot.sendMessage(chatId, "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      
      // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
      booking.cancelled = true;
      booking.confirmed = false;
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      bot.answerCallbackQuery(query.id, { text: "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!" });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏:', error);
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
      if (query && query.message && query.message.chat && query.message.chat.id) {
        await bot.sendMessage(query.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      }
      
      if (query && query.id) {
        bot.answerCallbackQuery(query.id, { text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" });
      }
    } catch (sendError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
    }
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏
app.post('/api/pending-booking', (req, res) => {
  try {
    const { userId, service, staff, date, time } = req.body;
    
    if (!userId) {
      return res.status(400).json({ 
        success: false, 
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ userId' 
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    pendingBookings[userId] = { 
      service, 
      staff, 
      date, 
      time,
      userId, // –î–æ–±–∞–≤–ª—è–µ–º userId –≤ —Å–∞–º—É –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
      timestamp: new Date().toISOString(),
      confirmed: false,
      cancelled: false
    };
    
    console.log(`–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: ${JSON.stringify(pendingBookings[userId])}`);
    res.json({ success: true, bookingId: userId });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –î–æ–±–∞–≤–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/bookings', (req, res) => {
  res.json({ pendingBookings, telegramUserIds });
});

// Webhook endpoint for production mode
if (process.env.NODE_ENV === 'production') {
  app.post(`/webhook/${process.env.BOT_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));