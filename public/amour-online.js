const API_BASE_URL = "https://pro-1-qldl.onrender.com/api";
const TELEGRAM_BOT_URL = "https://t.me/MLfeBot";

// ===== –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–•–û–î–ê –ü–û –°–ï–ö–¶–ò–Ø–ú =====
window.goTo = function(section) {
  localStorage.setItem("returnUrl", window.location.href);
  window.location.href = `${section}.html`;
};

// ===== –ü–û–ö–ê–ó –í–´–ë–†–ê–ù–ù–´–• –î–ê–ù–ù–´–• –ù–ê –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–ï =====
function renderSavedData() {
  const service = localStorage.getItem("selectedService") || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
  const staff = localStorage.getItem("selectedEmployee") || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
  const datetime = localStorage.getItem("selectedDatetime") || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";

  document.getElementById("chosen-service").textContent = service;
  document.getElementById("chosen-staff").textContent = staff;

  const datetimeElement = document.getElementById("chosen-time");
  if (datetime !== "–ù–µ –≤—ã–±—Ä–∞–Ω–æ") {
    const date = new Date(datetime);
    datetimeElement.textContent = date.toLocaleString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' });
  } else {
    datetimeElement.textContent = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
  }

  const submitBtn = document.getElementById("submitBtn");
  if (submitBtn) {
    const disabled = (service === "–ù–µ –≤—ã–±—Ä–∞–Ω–æ" || staff === "–ù–µ –≤—ã–±—Ä–∞–Ω–æ" || datetime === "–ù–µ –≤—ã–±—Ä–∞–Ω–æ");
    submitBtn.disabled = disabled;
    submitBtn.style.opacity = disabled ? "0.5" : "1";
    submitBtn.style.cursor = disabled ? "not-allowed" : "pointer";
  }
}

// ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
function ensureUserId() {
  let userId = localStorage.getItem("userId");
  if (!userId) {
    userId = "user_" + Math.random().toString(36).substring(2, 10);
    localStorage.setItem("userId", userId);
  }
  return userId;
}

function prepareBookingData() {
  const service = localStorage.getItem("selectedService");
  const staff = localStorage.getItem("selectedEmployee");
  const datetime = localStorage.getItem("selectedDatetime");
  const userId = ensureUserId();

  if (!service || !staff || !datetime) return null;

  const dateObj = new Date(datetime);
  const date = dateObj.toISOString().split('T')[0];
  const time = dateObj.toTimeString().slice(0,5);

  return { service, staff, date, time, userId };
}

async function savePendingBooking(bookingData) {
  try {
    const response = await fetch(`${API_BASE_URL}/pending-booking`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(bookingData)
    });
    const result = await response.json();
    return result.success;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏:', error);
    return false;
  }
}

// ===== –ü–û–ö–ê–ó –ú–û–î–ê–õ–ö–ò –° TELEGRAM –ë–û–¢–û–ú =====
function showTelegramModal() {
  let modal = document.getElementById("telegram-modal");
  if (!modal) {
    modal = document.createElement("div");
    modal.id = "telegram-modal";
    modal.style = `
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      background: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center; z-index: 1000;
    `;
    modal.innerHTML = `
      <div style="background: white; padding: 20px; border-radius: 10px; text-align: center; max-width: 400px;">
        <h2 style="color: black;">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h2>
        <p style="color: black;">–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É <b>/start</b> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.</p>
        <div style="margin-top: 20px;">
          <button id="go-to-bot" style="padding: 10px 20px; margin-right: 10px;">–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É</button>
          <button id="close-modal" style="padding: 10px 20px;">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);

    document.getElementById("go-to-bot").onclick = () => {
      const userId = localStorage.getItem("userId");
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Deep Link –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ userId
      const deepLink = `${TELEGRAM_BOT_URL}?start=${userId}`;
      window.open(deepLink, "_blank");
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      modal.style.display = "none";
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ Telegram
      showCompletionNotification();
    };
    document.getElementById("close-modal").onclick = () => {
      modal.style.display = "none";
    };
  } else {
    modal.style.display = "flex";
  }
}

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ó–ê–í–ï–†–®–ï–ù–ò–ò –ó–ê–ü–ò–°–ò –í TELEGRAM =====
function showCompletionNotification() {
  const notification = document.createElement("div");
  notification.style = `
    position: fixed; bottom: 20px; right: 20px; 
    background: #4CAF50; color: white; 
    padding: 15px; border-radius: 5px; 
    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    z-index: 1000;
  `;
  notification.innerHTML = `
    <p style="margin: 0; font-weight: bold;">–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ Telegram</p>
    <p style="margin: 5px 0 0 0;">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å" –≤ –±–æ—Ç–µ</p>
  `;

  document.body.appendChild(notification);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    notification.style.opacity = "0";
    notification.style.transition = "opacity 1s";
    setTimeout(() => notification.remove(), 1000);
  }, 10000);
}

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–û–§–û–†–ú–ò–¢–¨ –í–ò–ó–ò–¢" =====
window.submitVisit = async function() {
  const bookingData = prepareBookingData();
  if (!bookingData) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è!");
    return;
  }

  const success = await savePendingBooking(bookingData);
  if (success) {
    showTelegramModal();
  } else {
    alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
};

// ===== –ü–†–û–í–ï–†–ö–ê TELEGRAM DEEP LINK =====
function checkTelegramDeepLink() {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ deep link –∏–∑ Telegram
  const urlParams = new URLSearchParams(window.location.search);
  const telegramId = urlParams.get('telegram_id');
  
  if (telegramId) {
    const userId = localStorage.getItem("userId");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID
    fetch(`${API_BASE_URL}/link-telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId, telegramId })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –ª–æ–∫–∞–ª—å–Ω–æ
        localStorage.setItem("telegramId", telegramId);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–≤—è–∑–∫–µ
        const notification = document.createElement("div");
        notification.style = `
          position: fixed; bottom: 20px; right: 20px; 
          background: #4CAF50; color: white; 
          padding: 15px; border-radius: 5px; 
          box-shadow: 0 2px 10px rgba(0,0,0,0.2);
          z-index: 1000;
        `;
        notification.innerHTML = `
          <p style="margin: 0; font-weight: bold;">–ê–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å Telegram</p>
          <p style="margin: 5px 0 0 0;">–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç</p>
        `;
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          notification.style.opacity = "0";
          notification.style.transition = "opacity 1s";
          setTimeout(() => notification.remove(), 1000);
        }, 5000);
        
        // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        history.replaceState({}, document.title, location.pathname);
      }
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å Telegram:', error);
    });
  }
}

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–ô –ü–û –ü–£–ù–ö–¢–ê–ú "–£–°–õ–£–ì–ê", "–°–û–¢–†–£–î–ù–ò–ö", "–î–ê–¢–ê" =====
document.addEventListener("DOMContentLoaded", () => {
  renderSavedData();
  checkTelegramDeepLink();

  const selectionElements = document.querySelectorAll('.selection');
  selectionElements.forEach(el => {
    el.addEventListener('click', () => {
      const onclickAttr = el.getAttribute('onclick');
      const match = onclickAttr && onclickAttr.match(/goTo\('(.+?)'\)/);
      if (match && match[1]) {
        goTo(match[1]);
      }
    });
  });
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();
  const startParameter = match[1]; // –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ deep link (userId)
  
  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  bot.sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏!");
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ deep link, —Å–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (startParameter) {
    const userId = startParameter;
    
    // –°–≤—è–∑—ã–≤–∞–µ–º telegramId —Å userId
    userTelegramMap[telegramId] = userId;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    try {
      const response = await fetch(`${DOMAIN}/api/link-telegram`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, telegramId })
      });
      
      const result = await response.json();
      
      if (!result.success) {
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        return;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
      bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞ —Å–∞–π—Ç–µ
  const userId = userTelegramMap[telegramId];
  
  if (!userId) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–≤—è–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤—è–∑–∞—Ç—å
    bot.sendMessage(chatId, 
      "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å —Å–∞–π—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É. " +
      "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", 
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏", callback_data: "check_bookings" }]
          ]
        }
      }
    );
    return;
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const booking = pendingBookings[userId];
  
  if (!booking) {
    bot.sendMessage(chatId, 
      "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∞ —Å–∞–π—Ç–µ.", 
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏", callback_data: "check_bookings" }]
          ]
        }
      }
    );
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
  const { service, staff, date, time } = booking;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  const formattedDate = new Date(date).toLocaleDateString('ru-RU');
  
  const text = `‚ú® –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n\nüîπ –£—Å–ª—É–≥–∞: ${service}\nüîπ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${staff}\nüîπ –î–∞—Ç–∞: ${formattedDate}\nüîπ –í—Ä–µ–º—è: ${time}`;
  
  bot.sendMessage(chatId, text, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data: `confirm_${userId}` }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data: `cancel_${userId}` }]
      ]
    }
  });
});
