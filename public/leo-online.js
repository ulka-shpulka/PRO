console.log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –°–ö–†–ò–ü–¢–ê ===");
console.log("–°–∫—Ä–∏–ø—Ç leo-online.js –∑–∞–≥—Ä—É–∂–µ–Ω");
console.log("document.readyState:", document.readyState);

// API URL configuration
const API_BASE_URL = "https://pro-1-qldl.onrender.com/api";
const TELEGRAM_BOT_URL = "https://t.me/MLfeBot";

// Navigation function
window.goTo = function(section) {
  console.log(`üîÄ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${section}`);
  
  switch (section) {
    case 'services':
      window.location.href = "services.html";
      break;
    case 'staff':
      window.location.href = "staff.html";
      break;
    case 'datetime':
      window.location.href = "datetime.html";
      break;
    case 'leo-online':
      window.location.href = "leo-online.html";
      break;
    default:
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª: ${section}`);
  }
};

// Format date and time for display
function formatDateTime(isoString) {
  if (!isoString) return "";

  const date = new Date(isoString);
  if (isNaN(date.getTime())) {
    console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISO —Å—Ç—Ä–æ–∫–∏:", isoString);
    return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã";
  }

  const options = {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  };

  return date.toLocaleString('ru-RU', options);
}

// Render saved data from localStorage to page
function renderSavedData() {
  const service = localStorage.getItem("selectedService") || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
  const staff = localStorage.getItem("selectedEmployee") || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
  const datetime = localStorage.getItem("selectedDatetime") || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";

  const serviceElement = document.getElementById("chosen-service");
  const staffElement = document.getElementById("chosen-staff");
  const timeElement = document.getElementById("chosen-time");

  if (serviceElement) serviceElement.textContent = service;
  if (staffElement) staffElement.textContent = staff;
  if (timeElement) {
    timeElement.textContent = (datetime !== "–ù–µ –≤—ã–±—Ä–∞–Ω–æ") ? formatDateTime(datetime) : "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
  }
}

// Load DOM event listeners
document.addEventListener('DOMContentLoaded', () => {
  console.log("üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
  renderSavedData();
});

// Save pending booking to the server
async function savePendingBooking(bookingData) {
  try {
    const response = await fetch(`${API_BASE_URL}/pending-booking`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(bookingData)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ pending booking:', data);
    
    if (!data.success) {
      alert(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ pending booking:', error);
    alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return false;
  }
}

// Load saved data from localStorage
function loadSavedData() {
  console.log("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage");
  return {
    service: localStorage.getItem("selectedService") || null,
    staff: localStorage.getItem("selectedEmployee") || null,
    datetime: localStorage.getItem("selectedDatetime") || null,
    telegramUsername: localStorage.getItem("telegramUsername") || null
  };
}

// Selection functions
function selectService(serviceName) {
  console.log("–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞:", serviceName);
  localStorage.setItem("selectedService", serviceName);
  goTo('staff');
}

function selectStaff(staffName) {
  console.log("–í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:", staffName);
  localStorage.setItem("selectedEmployee", staffName);
  goTo('datetime');
}

function selectDateTime(datetime) {
  console.log("–í—ã–±—Ä–∞–Ω—ã –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:", datetime);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const dateObj = new Date(datetime);
  if (isNaN(dateObj.getTime())) {
    console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:", datetime);
    alert("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.");
    return;
  }

  localStorage.setItem("selectedDatetime", datetime);
  goTo('leo-online');
}

// Prepare booking data for submission
function prepareBookingData() {
  const service = localStorage.getItem("selectedService");
  const staff = localStorage.getItem("selectedEmployee");
  const datetime = localStorage.getItem("selectedDatetime");
  
  // Get telegramUsername if it was saved previously, or prompt for it
  let telegramUsername = localStorage.getItem("telegramUsername");
  
  if (!service || !staff || !datetime) {
    console.error("‚ùå –ù–µ—Ç –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏", { service, staff, datetime });
    return null;
  }

  try {
    const [date, time] = datetime.split('T');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if (!date || !time) {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏:", datetime);
      return null;
    }

    return { 
      service, 
      staff, 
      date, 
      time, 
      telegramUsername 
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏:", error);
    return null;
  }
}

// Handle the submission process
window.submitVisit = async function() {
  console.log("=== –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø submitVisit() ===");
  
  // Check if all required data is selected
  const { service, staff, datetime } = loadSavedData();
  if (!service || !staff || !datetime) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏.");
    return;
  }
  
  // Ask for Telegram username
  let telegramUsername = prompt("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ Telegram (–±–µ–∑ @):");
  if (!telegramUsername) {
    alert("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à username –≤ Telegram.");
    return;
  }
  
  // Save username to localStorage
  localStorage.setItem("telegramUsername", telegramUsername);
  
  // Prepare booking data with updated username
  const bookingData = prepareBookingData();
  if (!bookingData) {
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
    return;
  }

  const confirmed = confirm(
    "üõé –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞.\n\n–ù–∞–∂–º–∏—Ç–µ OK, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏."
  );

  if (!confirmed) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å");
    return;
  }

  // Save pending booking to server
  const success = await savePendingBooking(bookingData);

  if (success) {
    console.log("‚úÖ Pending booking —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –±–æ—Ç—É...");
    
    // Open Telegram bot in new tab
    window.open(`${TELEGRAM_BOT_URL}`, '_blank');
    
    // Show follow-up instructions
    setTimeout(() => {
      alert("–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.");
    }, 500);
  }
};