// leo-online.js - —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏

document.addEventListener("DOMContentLoaded", function () {
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  const service = localStorage.getItem("selectedService");
  const staff = localStorage.getItem("selectedEmployee");
  const datetime = localStorage.getItem("selectedDatetime");

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  document.getElementById("chosen-service").textContent = service || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
  document.getElementById("chosen-staff").textContent = staff || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
  document.getElementById("chosen-time").textContent = 
    datetime ? formatDateTime(datetime) : "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const submitBtn = document.getElementById("submitBtn");
  submitBtn.disabled = !(service && staff && datetime);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
  if (submitBtn.disabled) {
    submitBtn.classList.add("disabled");
  } else {
    submitBtn.classList.remove("disabled");
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function formatDateTime(datetimeStr) {
  const dt = new Date(datetimeStr);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const day = dt.getDate().toString().padStart(2, '0');
  const month = (dt.getMonth() + 1).toString().padStart(2, '0');
  const year = dt.getFullYear();
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const hours = dt.getHours().toString().padStart(2, '0');
  const minutes = dt.getMinutes().toString().padStart(2, '0');
  
  return `${day}.${month}.${year} –≤ ${hours}:${minutes}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function goTo(page) {
  // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ –∏ –≤—Ä–µ–º—è
  if (page === 'services') {
    localStorage.removeItem("selectedEmployee");
    localStorage.removeItem("selectedDatetime");
  }
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
  if (page === 'staff') {
    localStorage.removeItem("selectedDatetime");
  }

  window.location.href = `${page}.html`;
}

function submitVisit() {
  const service = localStorage.getItem("selectedService");
  const staff = localStorage.getItem("selectedEmployee");
  const datetime = localStorage.getItem("selectedDatetime");

  if (!service || !staff || !datetime) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏.");
    return;
  }

  const confirmed = confirm(
    "üõé –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞.\n\n–ù–∞–∂–º–∏—Ç–µ OK, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏."
  );
  
  if (!confirmed) return;

  const submitBtn = document.getElementById("submitBtn");
  submitBtn.disabled = true;
  submitBtn.classList.add("disabled");
  submitBtn.textContent = "–û—Ç–ø—Ä–∞–≤–∫–∞...";

  const [date, time] = datetime.split("T");

  sendBookingData(service, staff, date, time)
    .then((response) => {
      if (response.success) {
        alert("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.");
      } else {
        throw new Error(response.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
      }
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);
      alert("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ Telegram.");
    })
    .finally(() => {
      window.open("https://t.me/MLfeBot", "_blank");
      
      localStorage.clear();
      
      document.getElementById("chosen-service").textContent = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
      document.getElementById("chosen-staff").textContent = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";
      document.getElementById("chosen-time").textContent = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ";

      submitBtn.disabled = true;
      submitBtn.classList.add("disabled");
      submitBtn.textContent = "–û–§–û–†–ú–ò–¢–¨ –í–ò–ó–ò–¢";
      
      setTimeout(() => {
        window.location.href = "leo.html";
      }, 2000);
    });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function sendBookingData(service, staff, date, time) {
  // URL –≤–∞—à–µ–≥–æ API (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)
  const apiUrl = " https://lumire.onrender.com/7649901748:AAE-yAcdXAQKmIoO45ErEdVfdicBGD6dwKs";
  
  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  // const apiUrl = "https://–≤–∞—à-–¥–æ–º–µ–Ω.com/book";
  
  return fetch(apiUrl, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ 
      service, 
      staff, 
      date, 
      time
    }),
  }).then((response) => {
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
    }
    return response.json();
  });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
function selectService(serviceName) {
  localStorage.setItem("selectedService", serviceName);
  goTo('staff'); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
function selectStaff(staffName) {
  localStorage.setItem("selectedEmployee", staffName);
  goTo('datetime'); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function selectDateTime(datetime) {
  localStorage.setItem("selectedDatetime", datetime);
  goTo('leo-online'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const mongoose = require('mongoose');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '7492776215:AAFBnBmCvf_LL1QlW7zOXO19piWCRvWNb3k';
const CHANNEL_ID = '@MLfeBot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å @ –∏–ª–∏ –µ–≥–æ ID
const ADMIN_USERNAME = '@sae_bun'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose.connect('mongodb://localhost:27017/beauty_salon', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.error('MongoDB connection error:', err));

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è –∑–∞–ø–∏—Å–µ–π
const BookingSchema = new mongoose.Schema({
  userId: { type: Number, required: true },
  userName: { type: String },
  service: { type: String, required: true },
  staff: { type: String, required: true },
  date: { type: String, required: true },
  time: { type: String, required: true },
  salon: { type: String, required: true, default: '–°–∞–ª–æ–Ω 1' },
  createdAt: { type: Date, default: Date.now }
});

const Booking = mongoose.model('Booking', BookingSchema);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –°–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤
const salons = [
  { name: '–°–∞–ª–æ–Ω 1', address: '—É–ª. –ü—É—à–∫–∏–Ω–∞, 10', link: 'https://maps.google.com/?q=–°–∞–ª–æ–Ω1' },
  { name: '–°–∞–ª–æ–Ω 2', address: '—É–ª. –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞, 15', link: 'https://maps.google.com/?q=–°–∞–ª–æ–Ω2' },
  { name: '–°–∞–ª–æ–Ω 3', address: '—É–ª. –ì–æ–≥–æ–ª—è, 20', link: 'https://maps.google.com/?q=–°–∞–ª–æ–Ω3' },
  { name: '–°–∞–ª–æ–Ω 4', address: '—É–ª. –¢–æ–ª—Å—Ç–æ–≥–æ, 25', link: 'https://maps.google.com/?q=–°–∞–ª–æ–Ω4' }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
async function checkSubscription(userId) {
  try {
    const response = await axios.get(`https://api.telegram.org/bot${BOT_TOKEN}/getChatMember`, {
      params: {
        chat_id: CHANNEL_ID,
        user_id: userId
      }
    });
    
    const status = response.data.result.status;
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –æ–¥–∏–Ω –∏–∑: member, administrator, creator
    return ['member', 'administrator', 'creator'].includes(status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
function getMainKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data: 'my_records' }],
        [{ text: 'üè¢ –°–∞–ª–æ–Ω—ã', callback_data: 'salons' }],
        [{ text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'help' }]
      ]
    }
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const firstName = msg.from.first_name || '–ö–ª–∏–µ–Ω—Ç';
  
  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  await bot.sendMessage(chatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${firstName}! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø–∏—Å–∏, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ${CHANNEL_ID}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(userId);
  
  if (isSubscribed) {
    await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.`, getMainKeyboard());
  } else {
    await bot.sendMessage(chatId, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_ID}, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const messageId = query.message.message_id;
  const data = query.data;
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞
  await bot.answerCallbackQuery(query.id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  const isSubscribed = await checkSubscription(userId);
  
  if (!isSubscribed) {
    await bot.sendMessage(chatId, `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ${CHANNEL_ID}`);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
  switch (data) {
    case 'my_records':
      await showUserBookings(chatId, userId);
      break;
      
    case 'salons':
      await showSalons(chatId);
      break;
      
    case 'help':
      await bot.sendMessage(chatId, `–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ${ADMIN_USERNAME}`, getMainKeyboard());
      break;
      
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞
    case 'salon_1':
    case 'salon_2':
    case 'salon_3':
    case 'salon_4':
      const salonIndex = parseInt(data.split('_')[1]) - 1;
      await showSalonDetails(chatId, salonIndex);
      break;
      
    case 'back_to_main':
      await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        chat_id: chatId,
        message_id: messageId,
        ...getMainKeyboard()
      });
      break;
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserBookings(chatId, userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const bookings = await Booking.find({ userId }).sort({ date: 1, time: 1 });
    
    if (bookings.length === 0) {
      await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.', getMainKeyboard());
      return;
    }
    
    let message = 'üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n';
    
    bookings.forEach((booking, index) => {
      message += `*${index + 1}.* ${booking.service}\n`;
      message += `üßë‚Äçüíº –ú–∞—Å—Ç–µ—Ä: ${booking.staff}\n`;
      message += `üìç –°–∞–ª–æ–Ω: ${booking.salon}\n`;
      message += `üìÖ –î–∞—Ç–∞: ${booking.date}\n`;
      message += `üïí –í—Ä–µ–º—è: ${booking.time}\n\n`;
    });
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      ...getMainKeyboard()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', getMainKeyboard());
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∞–ª–æ–Ω–æ–≤
async function showSalons(chatId) {
  const salonKeyboard = {
    reply_markup: {
      inline_keyboard: [
        ...salons.map((salon, index) => ([
          { text: salon.name, callback_data: `salon_${index + 1}` }
        ])),
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    }
  };
  
  await bot.sendMessage(chatId, 'üè¢ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*', {
    parse_mode: 'Markdown',
    ...salonKeyboard
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∞–ª–æ–Ω–µ
async function showSalonDetails(chatId, index) {
  const salon = salons[index];
  
  const message = `üè¢ *${salon.name}*\n\n` +
                 `üìç –ê–¥—Ä–µ—Å: ${salon.address}\n` +
                 `üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](${salon.link})`;
  
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–∞–ª–æ–Ω–æ–≤', callback_data: 'salons' }],
        [{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
      ]
    }
  };
  
  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    disable_web_page_preview: false,
    ...keyboard
  });
}

// API endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Å–∞–π—Ç–∞
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

app.use(bodyParser.json());

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
app.post('/api/booking', async (req, res) => {
  try {
    const { userId, userName, service, staff, date, time, salon } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isSubscribed = await checkSubscription(userId);
    
    if (!isSubscribed) {
      return res.status(403).json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª' 
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const booking = new Booking({
      userId,
      userName,
      service,
      staff,
      date,
      time,
      salon: salon || '–°–∞–ª–æ–Ω 1'
    });
    
    await booking.save();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(userId, 
      `‚úÖ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*\n\n` +
      `üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: ${service}\n` +
      `üßë‚Äçüíº –ú–∞—Å—Ç–µ—Ä: ${staff}\n` +
      `üè¢ –°–∞–ª–æ–Ω: ${salon || '–°–∞–ª–æ–Ω 1'}\n` +
      `üìÖ –î–∞—Ç–∞: ${date}\n` +
      `üïí –í—Ä–µ–º—è: ${time}`,
      {
        parse_mode: 'Markdown',
        ...getMainKeyboard()
      }
    );
    
    return res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    return res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞' 
    });
  }
});

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å —Å–∞–π—Ç–∞
app.post('/book', async (req, res) => {
  try {
    const { service, staff, date, time, userId, userName } = req.body;
    
    if (!userId) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const isSubscribed = await checkSubscription(userId);
    
    if (!isSubscribed) {
      return res.status(403).json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª'
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    const booking = new Booking({
      userId,
      userName: userName || '–ö–ª–∏–µ–Ω—Ç',
      service,
      staff,
      date,
      time,
      salon: req.body.salon || '–°–∞–ª–æ–Ω 1'
    });
    
    await booking.save();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.sendMessage(userId, 
      `‚úÖ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*\n\n` +
      `üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: ${service}\n` +
      `üßë‚Äçüíº –ú–∞—Å—Ç–µ—Ä: ${staff}\n` +
      `üè¢ –°–∞–ª–æ–Ω: ${req.body.salon || '–°–∞–ª–æ–Ω 1'}\n` +
      `üìÖ –î–∞—Ç–∞: ${date}\n` +
      `üïí –í—Ä–µ–º—è: ${time}`,
      {
        parse_mode: 'Markdown',
        ...getMainKeyboard()
      }
    );
    
    return res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
    return res.status(500).json({ success: false, error: error.message });
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
console.log('Bot is running...');